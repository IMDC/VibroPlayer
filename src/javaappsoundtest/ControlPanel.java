package javaappsoundtest;

import com.synthbot.jasiohost.AsioDriver;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.List;

/**
 * This is the Control Panel form. In this form it is possible to select the sound driver
 * used by application. That information is recorded in a config.txt file and the application
 * tries to load that every time it initiates.
 *
 * @author Rener Baffa da Silva
 */
public class ControlPanel extends javax.swing.JFrame {

    /**
     * Class constructor. This method creates a new control panel.
     */
    public ControlPanel() {
        /* Method created automaticaly by NetBeans to position all elements in the screen */
            initComponents();
        
        /* Put all available drivers in the combo box */
            comboBox.removeAllItems();
            List<String> list = AsioDriver.getDriverNames();

            for ( String item: list ) {
                comboBox.addItem ( item );
            }
        
        /**
         * If the file config.txt exists, load all the pre-saved information.
         * The information pattern of config.txt is:
         * Field name<b>;</b>Content to be saved<b>;</b>Additional information
         * Example:
         * Audio Driver<b>;</b>ASIO PreSonus FireStudio<b>;</b>1 (Previously position in the combo box)
         */
            BufferedReader reader;
            try {
                if ( new File ( "config.txt" ).exists() ) {
                    reader = new BufferedReader ( new FileReader ( "config.txt" ) );

                    String line = null;

                    while ( ( line = reader.readLine() ) != null ) {
                        String split[] =  line.split ( ";" );

                        /* If the current line contains the audio driver information, get that */
                        if ( split[0].equals ( "Audio Driver" ) ) {
                            comboBox.setSelectedIndex ( Integer.parseInt ( split[2] ) );
                        }
                    }

                    reader.close();
                }
            } catch (FileNotFoundException ex) {
                System.out.println ( ex );
            } catch (IOException ex) {
               System.out.println ( ex );
            }
        
        /**
         * Create the listener to save button that save the current information in the config.txt file.
         */
            saveButton.addMouseListener ( new java.awt.event.MouseAdapter() {
                public void mouseClicked ( java.awt.event.MouseEvent evt ) {
                    File file = new File ( "config.txt" );

                    try {
                        //Need to ask before overwrite
                        if ( file.exists() ) {

                        }       

                        file.createNewFile();
                        Writer writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( "config.txt" ), "utf-8" ) );
                        /* Write the information according to the pattern */
                        writer.write ( "Audio Driver;" + comboBox.getSelectedItem() + ";" +comboBox.getSelectedIndex() );
                        writer.close();

                    } catch (FileNotFoundException ex) {
                        System.out.println ( ex );
                    } catch (IOException ex) {
                        System.out.println ( ex );
                    }
                }
            });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the NetBeans Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboBox = new javax.swing.JComboBox();
        saveButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        comboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        saveButton.setText("Save");

        jLabel1.setText("Audio Driver:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(46, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
            .addGroup(layout.createSequentialGroup()
                .addGap(166, 166, 166)
                .addComponent(saveButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE)
                .addComponent(saveButton)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Main method. It starts the application itself.
     * 
     * @param args the command line arguments (created automatically)
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new ControlPanel().setVisible(true);
                }
            });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
