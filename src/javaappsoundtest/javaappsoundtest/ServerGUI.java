/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package javaappsoundtest;

import com.synthbot.jasiohost.AsioDriver;
import java.awt.BorderLayout;
import java.awt.Dialog;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JProgressBar;

/**
 *
 * @author imdc
 */
public class ServerGUI extends javax.swing.JFrame {
    
    /* static information */
    public static String defaultPath = "./IntimateInterfaceServer";
    public static final File path = new File ( defaultPath );
    public static final File config = new File ( defaultPath + "/config.txt" );
    
    public static JProgressBar dpb;
    
    protected SoundTableModel sounds;
    
    /* server thread */
    ServerThread server;
    
    /* server port */
    private int port;
    
    public static AsioDriver driver;
    public static AsioSoundHost listener;
    
    public static String musicName;
    
    public static boolean filesRead;
    
    public static String getCurrentTime() {
        DateFormat dateFormat = new SimpleDateFormat ( "yyyy/MM/dd HH:mm:ss" );
        Date date = new Date();
        return "" + dateFormat.format ( date ) + " -- ";
    }
    
    public static String getSoundsPath() {
        return defaultPath + "/sounds/";
    }
    
    public static String getCommandsPath() {
        return defaultPath + "/commands.txt";
    }
    
    /**
     * Creates new form Server
     */
    public ServerGUI() {
        initComponents();
        
        filesRead = false;
        
        log.append ( getCurrentTime() + "Program started.\n" );
        
        sounds = new SoundTableModel();
        server = new ServerThread ( sounds );
        server.initialize();
        
        try {
            driver = AsioDriver.getDriver ( "ASIO PreSonus FireStudio" );
            log.append ( getCurrentTime() + "ASIO PreSonus FireStudio successfully loaded.\n" );
        } catch ( Exception ex ) {
            driver = null;
            log.append ( getCurrentTime() + "ASIO PreSonus FireStudio not loaded. Please go to config to select the right driver.\n" );
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startServer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        readFiles = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        progressBarText = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startServer.setText("Start Server");
        startServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startServerActionPerformed(evt);
            }
        });

        log.setEditable(false);
        log.setColumns(20);
        log.setRows(5);
        jScrollPane1.setViewportView(log);

        readFiles.setText("Read Files");
        readFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readFilesActionPerformed(evt);
            }
        });

        progressBarText.setText(" ");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Configure");
        jMenu2.setToolTipText("");

        jMenuItem1.setText("Server");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setText("Comands and rules");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        help.setText("Help");
        help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });
        jMenuBar1.add(help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addComponent(readFiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 193, Short.MAX_VALUE)
                .addComponent(startServer)
                .addGap(175, 175, 175))
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBarText)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startServer)
                    .addComponent(readFiles))
                .addGap(32, 32, 32)
                .addComponent(progressBarText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        setSize(new java.awt.Dimension(735, 518));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        ServerConfig serverConfig = new ServerConfig();
        serverConfig.setVisible ( true );
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void startServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startServerActionPerformed
        
        if ( driver != null && filesRead ) {
            if ( server.getState() != Thread.State.RUNNABLE ) {
                server.start();
            }

            if ( !server.getRunning() ) {
                server.setRunning ( true );
                startServer.setText ( "STOP Server" );
            }
            else {
                server.setRunning ( false );
                startServer.setText ( "START Server" );
                log.append ( getCurrentTime() + "Server stopped.\n" );
            }
        }
        else if ( driver == null ) {
            log.append ( getCurrentTime() + "PreSonus driver not loaded. Make sure you have it installed or check \"Help\" page to see details.\n" );
        }
        else if ( !filesRead ) {
            log.append ( getCurrentTime() + "Please, read the files before start the server.\n" );
        }
        
    }//GEN-LAST:event_startServerActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        
        CommandsConfig commandsConfig = new CommandsConfig ( sounds );
        commandsConfig.setVisible ( true );
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpActionPerformed
        
        
        
    }//GEN-LAST:event_helpActionPerformed

    private void readFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readFilesActionPerformed
        
        /* load all the files */
        ServerGUI.log.append ( getCurrentTime() + "Starting to read files...\n" );
        readFiles.setText ( "Reading files..." );
        readFiles.setEnabled ( false );
        
        //Should put it in a thread
        Thread t1 = new Thread() {
            
            @Override
            public void run() {
                try {
                    sounds.readFiles();
                    ServerGUI.filesRead = true;
                }
                catch ( Exception ex ) {
                    ServerGUI.log.append ( getCurrentTime() + ex.getMessage() + "\n" );
                    filesRead = false;

                    readFiles.setText ( "Read Files" );
                    readFiles.setEnabled ( true );
                }
            }
        };
        t1.start();
        
        System.out.println ( "Thread finished" );
        
    }//GEN-LAST:event_readFilesActionPerformed

    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                //new Player().setVisible(true);
                ServerGUI server = new ServerGUI();
                server.setVisible ( true );
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu help;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea log;
    public static javax.swing.JProgressBar progressBar;
    public static javax.swing.JLabel progressBarText;
    private javax.swing.JButton readFiles;
    private javax.swing.JButton startServer;
    // End of variables declaration//GEN-END:variables
}
